<!--
   - WinCompose — a compose key for Windows — http://wincompose.info/
   -
   - Copyright © 2013—2017 Sam Hocevar <sam@hocevar.net>
   -             2014—2015 Benjamin Litzelmann
   -
   - This program is free software. It comes without any warranty, to
   - the extent permitted by applicable law. You can redistribute it
   - and/or modify it under the terms of the Do What the Fuck You Want
   - to Public License, Version 2, as published by the WTFPL Task Force.
   - See http://www.wtfpl.net/ for more details.
  -->

<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i18n="clr-namespace:WinCompose.i18n"
        xmlns:wc="clr-namespace:WinCompose"
        mc:Ignorable="d" x:Class="WinCompose.SettingsWindow"
        Title="{x:Static i18n:Text.Options}" Width="400" Height="500"
        Icon="/WinCompose;component/res/key_compose.png"
        WindowStyle="ToolWindow"
        ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen"
        SizeToContent="Height"
        Closing="CloseWindowClicked">

    <Window.Resources>

       <!-- display tooltips for 30 seconds; they’re supposed to be helpful -->
       <Style TargetType="TextBlock">
           <Setter Property="ToolTipService.ShowDuration" Value="30000" />
       </Style>
       <Style TargetType="CheckBox">
           <Setter Property="ToolTipService.ShowDuration" Value="30000" />
       </Style>

       <!-- wrap tooltips at 350 pixels width -->
       <Style TargetType="ToolTip">
          <Setter Property="ContentTemplate">
             <Setter.Value>
                <DataTemplate>
                   <StackPanel>
                      <TextBlock Text="{Binding}" MaxWidth="350" TextWrapping="Wrap" />
                   </StackPanel>
                </DataTemplate>
             </Setter.Value>
          </Setter>
       </Style>
    </Window.Resources>

    <Window.CommandBindings>
        <CommandBinding Command="ApplicationCommands.Close"
                        Executed="OnCloseCommandExecuted"/>
    </Window.CommandBindings>
    
    <Window.InputBindings>
        <KeyBinding Key="Escape" Command="ApplicationCommands.Close"/>
        <!-- TODO: bind this to something -->
        <!--<KeyBinding Key="Escape" Command=""/>-->
    </Window.InputBindings>

    <StackPanel Orientation="Vertical">

      <TabControl Margin="10">

        <!-- The Settings group -->
        <TabItem Header="{x:Static i18n:Text.General}">
            <DockPanel Margin="8" Name="MasterPanel">
                <GroupBox Header="{x:Static i18n:Text.Behavior}" DockPanel.Dock="Top" VerticalAlignment="Top">
                    <Grid VerticalAlignment="Top">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="{x:Static i18n:Text.Language}"
                                   Margin="8,4" TextAlignment="Right" VerticalAlignment="Center"
                                   ToolTipService.ToolTip="{x:Static i18n:Text.LanguageToolTip}"/>
                        <ComboBox Grid.Row="0" Grid.Column="1" Margin="8,4" VerticalAlignment="Center"
                                  ItemsSource="{x:Static wc:Settings.ValidLanguages}"
                                  SelectedValue="{Binding SelectedLanguage}"
                                  SelectedValuePath="Key" DisplayMemberPath="Value"/>

                        <TextBlock Grid.Row="1" Grid.Column="0" Text="{x:Static i18n:Text.ComposeKey}"
                                   Margin="8,4" TextAlignment="Right" VerticalAlignment="Center"
                                   ToolTipService.ToolTip="{x:Static i18n:Text.ComposeKeyToolTip}"/>
                        <ComboBox Grid.Row="1" Grid.Column="1" Margin="8,4" VerticalAlignment="Center"
                                  ItemsSource="{x:Static wc:Settings.ValidComposeKeys}"
                                  SelectedItem="{Binding ComposeKey0}"
                                  SelectedValuePath="" DisplayMemberPath="FriendlyName"/>

                        <TextBlock Grid.Row="2" Grid.Column="0" Text="{x:Static i18n:Text.ResetDelay}"
                                   Margin="8,4" TextAlignment="Right" VerticalAlignment="Center"/>
                        <Grid Grid.Row="2" Grid.Column="1" VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MaxWidth="70" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <TextBox Margin="8,4" Text="{Binding Value, Source={x:Static wc:Settings.ResetDelay}}"/>
                            <TextBlock Grid.Row="2" Grid.Column="1" Text="{x:Static i18n:Text.Milliseconds}"
                                       Margin="8,4" />
                        </Grid>

                        <TextBlock Grid.Row="3" Grid.Column="0" Text="{x:Static i18n:Text.TestTyping}"
                                   Margin="8,4" TextAlignment="Right" VerticalAlignment="Center"/>
                        <TextBox Grid.Row="3" Grid.Column="1" DockPanel.Dock="Top" Margin="8" Width="Auto"
                                 Height="Auto" FontSize="20" FontWeight="SemiBold"
                                 Foreground="#434" Background="#fff" ForceCursor="True">ÅḄ₡Đ♥…</TextBox>
                    </Grid>
                </GroupBox>

                <GroupBox DockPanel.Dock="Top" Header="{x:Static i18n:Text.UserDefinedSequences}" VerticalAlignment="Top">
                    <StackPanel Orientation="Horizontal">
                        <Button x:Name="EditUserDefinedSequences" MinWidth="80" Margin="8,4"
                                Content="{x:Static i18n:Text.UserDefinedSequencesEdit}"
                                Click="EditUserDefinedSequences_Click" />
                        <Button x:Name="ReloadUserDefinedSequences" MinWidth="80" Margin="8,4"
                                Content="{x:Static i18n:Text.UserDefinedSequencesReload}"
                                Click="ReloadUserDefinedSequences_Click" />
                    </StackPanel>
                </GroupBox>

                <!-- The Invalid Sequences group -->
                <GroupBox DockPanel.Dock="Top" Header="{x:Static i18n:Text.InvalidSequences}" VerticalAlignment="Top">
                    <StackPanel VerticalAlignment="Center">

                        <CheckBox Margin="8,4" VerticalAlignment="Center"
                                  IsChecked="{Binding Value, Source={x:Static wc:Settings.CaseInsensitive}}"
                                  ToolTipService.ToolTip="{x:Static i18n:Text.CaseInsensitiveToolTip}">
                            <TextBlock Text="{x:Static i18n:Text.CaseInsensitive}" TextWrapping="Wrap"/>
                        </CheckBox>

                        <CheckBox Margin="8,4" VerticalAlignment="Center"
                                  IsChecked="{Binding Value, Source={x:Static wc:Settings.DiscardOnInvalid}}"
                                  ToolTipService.ToolTip="{x:Static i18n:Text.DiscardOnInvalidToolTip}">
                            <TextBlock Text="{x:Static i18n:Text.DiscardOnInvalid}" TextWrapping="Wrap"/>
                        </CheckBox>

                        <CheckBox Margin="8,4" VerticalAlignment="Center"
                                  IsChecked="{Binding Value, Source={x:Static wc:Settings.BeepOnInvalid}}"
                                  ToolTipService.ToolTip="{x:Static i18n:Text.BeepOnInvalidToolTip}">
                            <TextBlock Text="{x:Static i18n:Text.BeepOnInvalid}" TextWrapping="Wrap"/>
                        </CheckBox>

                    </StackPanel>
                </GroupBox>

            </DockPanel>
        </TabItem>

        <!-- The Tweaks tab -->
        <TabItem Header="{x:Static i18n:Text.Tweaks}">
            <StackPanel Margin="8" Height="{Binding ElementName=MasterPanel, Path=ActualHeight}">

                <CheckBox Margin="8,4" VerticalAlignment="Center"
                          IsChecked="{Binding Value, Source={x:Static wc:Settings.UnicodeInput}}"
                          ToolTipService.ToolTip="{x:Static i18n:Text.UnicodeInputToolTip}">
                    <TextBlock Text="{x:Static i18n:Text.UnicodeInput}" TextWrapping="Wrap"/>
                </CheckBox>

                <CheckBox Margin="8,4" VerticalAlignment="Center"
                        IsChecked="{Binding Value, Source={x:Static wc:Settings.KeepOriginalKey}}"
                        ToolTipService.ToolTip="{x:Static i18n:Text.KeepOriginalKeyToolTip}">
                    <TextBlock Text="{x:Static i18n:Text.KeepOriginalKey}" TextWrapping="Wrap"/>
                </CheckBox>

                <CheckBox Margin="8,4" VerticalAlignment="Center"
                        IsChecked="{Binding Value, Source={x:Static wc:Settings.InsertZwsp}}"
                        ToolTipService.ToolTip="{x:Static i18n:Text.InsertZwspToolTip}">
                    <TextBlock Text="{x:Static i18n:Text.InsertZwsp}" TextWrapping="Wrap"/>
                </CheckBox>

                <CheckBox Margin="8,4" VerticalAlignment="Center"
                        IsChecked="{Binding Value, Source={x:Static wc:Settings.EmulateCapsLock}}"
                        ToolTipService.ToolTip="{x:Static i18n:Text.EmulateCapsLockToolTip}">
                    <TextBlock Text="{x:Static i18n:Text.EmulateCapsLock}" TextWrapping="Wrap"/>
                </CheckBox>

                <CheckBox Margin="8,4" VerticalAlignment="Center"
                        IsChecked="{Binding Value, Source={x:Static wc:Settings.ShiftDisablesCapsLock}}"
                        ToolTipService.ToolTip="{x:Static i18n:Text.ShiftDisablesCapsLockToolTip}">
                    <TextBlock Text="{x:Static i18n:Text.ShiftDisablesCapsLock}" TextWrapping="Wrap"/>
                </CheckBox>

                <CheckBox Margin="8,4" VerticalAlignment="Center"
                        IsChecked="{Binding Value, Source={x:Static wc:Settings.CapsLockCapitalizes}}"
                        ToolTipService.ToolTip="{x:Static i18n:Text.CapsLockCapitalizesToolTip}">
                    <TextBlock Text="{x:Static i18n:Text.CapsLockCapitalizes}" TextWrapping="Wrap"/>
                </CheckBox>

                <CheckBox Margin="8,4" VerticalAlignment="Center"
                        IsChecked="{Binding Value, Source={x:Static wc:Settings.AllowInjected}}"
                        ToolTipService.ToolTip="{x:Static i18n:Text.AllowInjectedToolTip}">
                    <TextBlock Text="{x:Static i18n:Text.AllowInjected}" TextWrapping="Wrap"/>
                </CheckBox>
            </StackPanel>
        </TabItem>

      </TabControl>

      <!-- The Close button and the restart warning message -->
      <TextBlock Foreground="Red" Text="{x:Static i18n:Text.NeedRestart}" HorizontalAlignment="Left"
                 Margin="0, 0, 0, 4" Visibility="{Binding WarnMessageVisibility}" TextWrapping="Wrap"/>
      <Button DockPanel.Dock="Bottom" HorizontalAlignment="Right" VerticalAlignment="Bottom" MinWidth="80"
              Margin="10,0,10,10" Content="{Binding CloseButtonText}" Command="{Binding CloseButtonCommand}"
              CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}}" />

    </StackPanel>
</Window>
