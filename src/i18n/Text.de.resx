<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AutodetectLanguage" xml:space="preserve">
    <value>automatische Erkennung</value>
  </data>
  <data name="KeyLMenu" xml:space="preserve">
    <value>linke Alt-Taste</value>
  </data>
  <data name="KeyRMenu" xml:space="preserve">
    <value>rechte Alt-Taste</value>
  </data>
  <data name="KeyLControl" xml:space="preserve">
    <value>linke Strg-Taste</value>
  </data>
  <data name="KeyRControl" xml:space="preserve">
    <value>rechte Strg-Taste</value>
  </data>
  <data name="KeyLWin" xml:space="preserve">
    <value>linke Windows-Taste</value>
  </data>
  <data name="KeyRWin" xml:space="preserve">
    <value>rechte Windows-Taste</value>
  </data>
  <data name="KeyCapital" xml:space="preserve">
    <value>Feststelltaste</value>
  </data>
  <data name="KeyNumLock" xml:space="preserve">
    <value>Num-Taste</value>
  </data>
  <data name="KeyPause" xml:space="preserve">
    <value>Pause</value>
  </data>
  <data name="KeyApps" xml:space="preserve">
    <value>Menü</value>
  </data>
  <data name="KeyEscape" xml:space="preserve">
    <value>Escape</value>
  </data>
  <data name="KeyScroll" xml:space="preserve">
    <value>Rollen</value>
  </data>
  <data name="KeySpace" xml:space="preserve">
    <value>Leertaste</value>
  </data>
  <data name="KeyReturn" xml:space="preserve">
    <value>Eingabe</value>
  </data>
  <data name="Obsolete016" xml:space="preserve">
    <value>Gravis `</value>
  </data>
  <data name="Obsolete017" xml:space="preserve">
    <value>500 Millisekunden</value>
  </data>
  <data name="Obsolete018" xml:space="preserve">
    <value>1 Sekunde</value>
  </data>
  <data name="Obsolete019" xml:space="preserve">
    <value>2 Sekunden</value>
  </data>
  <data name="Obsolete020" xml:space="preserve">
    <value>3 Sekunden</value>
  </data>
  <data name="Obsolete021" xml:space="preserve">
    <value>5 Sekunden</value>
  </data>
  <data name="Obsolete022" xml:space="preserve">
    <value>10 Sekunden</value>
  </data>
  <data name="Obsolete023" xml:space="preserve">
    <value>Keine</value>
  </data>
  <data name="ShowSequences" xml:space="preserve">
    <value>Sequenzen anzeigen…</value>
  </data>
  <data name="Disable" xml:space="preserve">
    <value>Deaktivieren</value>
  </data>
  <data name="Restart" xml:space="preserve">
    <value>Neustart</value>
  </data>
  <data name="Obsolete027" xml:space="preserve">
    <value>Verlauf</value>
  </data>
  <data name="VisitWebsite" xml:space="preserve">
    <value>Website besuchen</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Beenden</value>
  </data>
  <data name="Obsolete036" xml:space="preserve">
    <value>von Sam Hocevar &lt;sam@hocevar.net&gt;</value>
  </data>
  <data name="Sequences" xml:space="preserve">
    <value>Sequenzen</value>
  </data>
  <data name="Obsolete039" xml:space="preserve">
    <value>Sequenz</value>
  </data>
  <data name="Obsolete041" xml:space="preserve">
    <value>Unicode</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Suchfilter:</value>
  </data>
  <data name="ComposeKey" xml:space="preserve">
    <value>Compose-Taste:</value>
  </data>
  <data name="ComposeKeyToolTip" xml:space="preserve">
    <value>Wählen Sie die Taste, die als Compose-Taste dienen soll.</value>
  </data>
  <data name="ResetDelay" xml:space="preserve">
    <value>Verzögerung:</value>
  </data>
  <data name="UnicodeInput" xml:space="preserve">
    <value>Erweiterte Unicode-Eingabe</value>
  </data>
  <data name="UnicodeInputToolTip" xml:space="preserve">
    <value>Unicode-Eingabe für beliebige Zeichen aktivieren, selbst wenn keine Compose-Tastenfolge definiert ist. Beispielsweise ergibt die Tastenfolge „Compose U 1 A 3 F“ das Zeichen U+1A3F</value>
  </data>
  <data name="InvalidSequences" xml:space="preserve">
    <value>Bei ungültigen Sequenzen</value>
  </data>
  <data name="CaseInsensitive" xml:space="preserve">
    <value>Groß- und Kleinschreibung ignorieren</value>
  </data>
  <data name="CaseInsensitiveToolTip" xml:space="preserve">
    <value>Wenn die eingegebene Sequenz nicht bekannt ist, es aber eine andere gibt, die sich nur in Groß- und Kleinschreibung unterscheidet, automatisch die andere nehmen.</value>
  </data>
  <data name="DiscardOnInvalid" xml:space="preserve">
    <value>Alle eingegebenen Zeichen verwerfen</value>
  </data>
  <data name="DiscardOnInvalidToolTip" xml:space="preserve">
    <value>Wenn die eingegebene Sequenz nicht bekannt ist, alle Zeichen verwerfen, die eingegeben wurden. Das Standardverhalten ist, die Zeichen so auszugeben, als wäre die Compose-Taste nicht gedrückt worden.</value>
  </data>
  <data name="BeepOnInvalid" xml:space="preserve">
    <value>Einen Piepton abspielen</value>
  </data>
  <data name="BeepOnInvalidToolTip" xml:space="preserve">
    <value>Wenn die eingegebene Sequenz nicht bekannt ist, einen Systemklang abspielen.</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Sprache der Benutzeroberfläche:</value>
  </data>
  <data name="LanguageToolTip" xml:space="preserve">
    <value>Wählen Sie die Sprache für die WinCompose-Benutzeroberfläche aus. Als Standardsprache wird die Sprache des Betriebssystems benutzt.</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Schließen</value>
  </data>
  <data name="Obsolete050" xml:space="preserve">
    <value>Zeichen kopieren</value>
  </data>
  <data name="Obsolete051" xml:space="preserve">
    <value>Beschreibung:</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>Übernehmen</value>
  </data>
  <data name="KeepOriginalKey" xml:space="preserve">
    <value>Ursprüngliches Verhalten der Compose-Taste beibehalten</value>
  </data>
  <data name="KeepOriginalKeyToolTip" xml:space="preserve">
    <value>WinCompose versucht, das ursprüngliche Verhalten der Compose-Taste soweit wie möglich beizubehalten. Zum Beispiel funktioniert die Tastenkombination Alt+Tab immer noch, selbst wenn Alt als Compose-Taste benutzt wird.</value>
  </data>
  <data name="InsertZwsp" xml:space="preserve">
    <value>Null-Breite-Leerzeichen in Office-Apps einfügen</value>
  </data>
  <data name="InsertZwspToolTip" xml:space="preserve">
    <value>In Microsoft-Office-Anwendungen ändert sich manchmal die Schriftart, wenn bestimmte Unicode-Zeichen eingegeben werden. Diese Einstellung fügt ein unsichtbares Zeichen nach dem Unicode-Zeichen ein, um diesen Fehler zu umgehen.</value>
  </data>
  <data name="EmulateCapsLock" xml:space="preserve">
    <value>Feststelltaste aktivieren mit beiden Umschalt-Tasten</value>
  </data>
  <data name="EmulateCapsLockToolTip" xml:space="preserve">
    <value>Wenn die Feststelltaste als Compose-Taste benutzt wird, wird das ursprüngliche Verhalten dieser Taste unmöglich. Mit dieser Einstellung können Sie beide Umschalttasten drücken, um die Feststelltaste zu simulieren.</value>
  </data>
  <data name="ShiftDisablesCapsLock" xml:space="preserve">
    <value>Umschalttaste deaktiviert Feststelltaste</value>
  </data>
  <data name="ShiftDisablesCapsLockToolTip" xml:space="preserve">
    <value>Wenn die Feststelltaste als Compose-Taste benutzt wird, wird das ursprüngliche Verhalten dieser Taste unmöglich. Mit dieser Einstellung können Sie den Feststellmodus ausschalten, indem Sie die Umschalttaste drücken.</value>
  </data>
  <data name="CapsLockCapitalizes" xml:space="preserve">
    <value>Feststelltaste erzeugt immer Großbuchstaben</value>
  </data>
  <data name="CapsLockCapitalizesToolTip" xml:space="preserve">
    <value>Wenn der Feststellmodus aktiv ist und Sie einen Buchstaben mit Akzent eingeben (zum Beispiel „é“), wird daraus der entsprechende Großbuchstabe (in diesem Fall „É“).</value>
  </data>
  <data name="Categories" xml:space="preserve">
    <value>Kategorien</value>
  </data>
  <data name="InSelectedCategories" xml:space="preserve">
    <value>In ausgewählten Kategorien</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Optionen – WinCompose</value>
  </data>
  <data name="ShowOptions" xml:space="preserve">
    <value>Optionen…</value>
  </data>
  <data name="TrayToolTip" xml:space="preserve">
    <value>WinCompose v{2} auf {0} ({1} Sequenzen)</value>
  </data>
  <data name="WindowTitle" xml:space="preserve">
    <value>Sequenzen – WinCompose</value>
  </data>
  <data name="UserMacros" xml:space="preserve">
    <value>Benutzerdefinierte Makros</value>
  </data>
  <data name="DisabledToolTip" xml:space="preserve">
    <value>WinCompose ist deaktiviert</value>
  </data>
  <data name="KeyInsert" xml:space="preserve">
    <value>Einfügen</value>
  </data>
  <data name="TestTyping" xml:space="preserve">
    <value>Testfeld zum Tippen:</value>
  </data>
  <data name="Tweaks" xml:space="preserve">
    <value>Diverse Einstellungen</value>
  </data>
  <data name="Milliseconds" xml:space="preserve">
    <value>(Millisekunden)</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>Über</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>WinCompose {0} herunterladen</value>
  </data>
  <data name="AboutBoxTitle" xml:space="preserve">
    <value>Über WinCompose</value>
  </data>
  <data name="Programming" xml:space="preserve">
    <value>Programmierung</value>
  </data>
  <data name="Translators" xml:space="preserve">
    <value>Übersetzung</value>
  </data>
  <data name="Contributors" xml:space="preserve">
    <value>Besonderer Dank</value>
  </data>
  <data name="License" xml:space="preserve">
    <value>Lizenz</value>
  </data>
  <data name="NeedRestart" xml:space="preserve">
    <value>WinCompose muss neugestartet werden, damit alle Änderungen aktiv werden.</value>
  </data>
  <data name="ReportBug" xml:space="preserve">
    <value>Fehler melden</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Hilfe</value>
  </data>
  <data name="UpdatesToolTip" xml:space="preserve">
    <value>Eine neue Version ist verfügbar.</value>
  </data>
  <data name="UserDefinedSequences" xml:space="preserve">
    <value>Benutzerdefinierte Makros</value>
  </data>
  <data name="UserDefinedSequencesEdit" xml:space="preserve">
    <value>bearbeiten</value>
  </data>
  <data name="UserDefinedSequencesReload" xml:space="preserve">
    <value>Neu laden</value>
  </data>
  <data name="AllowInjected" xml:space="preserve">
    <value>Beachte injizierte Tasten</value>
  </data>
  <data name="AllowInjectedToolTip" xml:space="preserve">
    <value>Beachte Tasten gesendet von anderer Software wie Synergy</value>
  </data>
</root>